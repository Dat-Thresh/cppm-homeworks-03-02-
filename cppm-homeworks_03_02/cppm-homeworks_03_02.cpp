// cppm-homeworks_03_02.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <windows.h>
#include <string>

class Counter {
private:
    int tik;
public:
    //принимаем ввод пользователя
    Counter(int tik) {
        this->tik = tik;
    }
    //юзер не вводит, по умолчанию ставим 1
    Counter() {
        tik = 1;
    }

    //возвращает счетчик
    Counter get_counter() {
        return tik;
    }
    //принимает символы, и от их значения меняет/не меняет счетчик, возвращает true, пока пользователь не введет "x"
    bool count(std::string a){
        
        if (a == "+") {
            tik++;
            return true;
        }
        if (a == "-") {
            tik--;
            return true;
        }
        if (a == "=") {
            std::cout << tik << std::endl;
            return true;
        }
        if (a == "x" || a == "х") {
            std::cout << "До свидания!" << std::endl;
            return false;
        }
        else {
            std::cout << "Неверная команда!" << std::endl;
            return true;
        }


    }
};
//проверяет ответ пользователя о самостоятельном вводе (да/нет), пока не введет правильно  
// и возвращает счетчик, созданный нужным для юзера способом
Counter get_and_check_answer();

int main()
{
    setlocale(LC_ALL, "rus");
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    
    std::string znak; //для записи команды юзера


    //проверяем ответ и получаем нужное число счетчика
    Counter tik = get_and_check_answer();

    do {        
        std::cout << "Введите команду ('+', '-', '=' или 'x'): ";
        std::getline(std::cin, znak);        
    } while (tik.count(znak));


}

Counter get_and_check_answer() {
    
    bool flag = false;
    std::string answer;
    //создаем счетчик по умолчанию заранее
    Counter tmp;

    //крутим, пока юзер не введет правильно ответ (да/нет)
    while (!flag) {
        std::cout << "Вы хотите указать начальное значение счётчика? Введите да или нет: ";
        std::getline(std::cin, answer);
        //если да, то создаем экземпляр со значением юзера и записываем в значение ранее созданного экземпляра (tmp)
        //и прекращаем цикл
        if (answer == "да" || answer == "Да" || answer == "ДА" || answer == "дА") {
            int numb;
            std::cout << "Введите начальное значение счётчика: ";
            std::cin >> numb;
            std::cin.ignore();
            Counter counter(numb);
            tmp = counter;
            flag = true;
        }
        //если нет, не меняем ранее созданный счетчик и прекращаем цикл
        else if (answer == "нет" || answer == "Нет" || answer == "НЕТ" || answer == "НЕт" || answer == "нЕТ" || answer == "неТ" || answer == "НеТ") {
            std::cout << "Значение счетчика установлено по умолчанию на \"1\"" << std::endl;            
            flag = true;

        }
        //не получили правильного ответа -> возвращаемся в начало цикла
        else {
            std::cout << "Неверный ввод!" << std::endl;
            flag = false;
        }
        
    }
    return tmp;
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
